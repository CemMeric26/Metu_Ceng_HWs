#/* $begin abscopy-ys */
##################################################################
# abscopy.ys - copy the absolute values of a src block of n words to dst.
# Return the sum of copied (absolute) values.
#
# Include your name and ID here.
#name = Cem Meriç Şefikoğulları
#ID = 2448850
# Describe how and why you modified the baseline code.
#I did an loop unrolling int he code I took 5 parameters
# and put them into r10,11,12,13,14 register
#I modified the loop accordingly when the unhecked part of the loop remains
# it will go to the remainder loop
#what if loop substracts 5 from rdx and check if the number is under <5
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = n
abscopy:
##################################################################
# You can modify this portion
        # Loop header
        xorq %rax,%rax          # sum = 0;
        andq %rdx,%rdx          # n <= 0?
        jle Done                # if so, goto Done:

WhatIf:
        irmovq $5, %r8          # %r8 = 5
        subq %r8, %rdx          # n -= 5
        andq   %rdx,%rdx
        jg Loop            # if n > 5, goto Loop
        addq %r8,%rdx

Remaning:
        #remaning handling
        mrmovq (%rdi), %r10     # read val from src...
        andq %r10, %r10         # val >= 0?
        jge Positive            # if so, skip negating
        isubq $0, %r10          # negation achieved!
Positive:
        addq %r10, %rax         # sum += absval   
        rmmovq %r10, (%rsi)     # ...and store it to dst
        irmovq $1, %r10
        subq %r10, %rdx         # n--
        irmovq $8, %r10
        addq %r10, %rsi         # dst++
        addq %r10, %rdi         # src++
        andq %rdx,%rdx          # n > 0?
        jg Remaning                 # if so, goto Remainig:
        jmp Done

Loop:   
        mrmovq (%rdi), %r10     # read val from src...
        mrmovq 8(%rdi), %r11     # read val from src...
        mrmovq 16(%rdi), %r12     # read val from src...
        mrmovq 24(%rdi), %r13     # read val from src...
        mrmovq 32(%rdi), %r14     # read val from src...

        andq %r10, %r10         # val >= 0?
        jge Positive1            # if so, skip negating
        isubq $0, %r10          # negation achieved!
Positive1:
        andq %r11, %r11         # val1 >= 0?
        jge Positive2            # if so, skip negating
        isubq $0, %r11          # negation achieved!
Positive2:
        andq %r12, %r12         # val2 >= 0?
        jge Positive3            # if so, skip negating
        isubq $0, %r12          # negation achieved!
Positive3:
        andq %r13, %r13         # val3 >= 0?
        jge Positive4            # if so, skip negating
        isubq $0, %r13          # negation achieved!
Positive4:
        andq %r14, %r14         # val4 >= 0?
        jge OrgPositive            # if so, skip negating
        isubq $0, %r14          # negation achieved!
OrgPositive:
        addq %r10, %rax         # sum += absval1  
        addq %r11, %rax         # sum += absval2 
        addq %r12, %rax         # sum += absval3  
        addq %r13, %rax         # sum += absval4 
        addq %r14, %rax         # sum += absval5

        rmmovq %r10, (%rsi)     # ...and store it to dst
        rmmovq %r11, 8(%rsi)     # ...and store it to dst+8
        rmmovq %r12, 16(%rsi)     # ...and store it to dst+16
        rmmovq %r13, 24(%rsi)     # ...and store it to dst+24
        rmmovq %r14, 32(%rsi)     # ...and store it to dst+40
    
        irmovq $40, %r8                  
        addq    %r8, %rdi         #updating the rdi src   
        addq    %r8, %rsi         #updating rsi dst
        jmp WhatIf      

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
        ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end abscopy-ys */
