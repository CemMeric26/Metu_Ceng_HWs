# name = Cem Meriç Şefikoğulları
# ID = 2448850

.pos 0x800
stack:

.pos 0
    irmovq stack, %rsp
    irmovq root, %rdi
    irmovq k,%rsi
    call kth_bst
    halt
    


#long kth_bst(struct Node* root, long *k)
kth_bst:

    xorq %rax,%rax          #%rax = 0

    #if (root)
    irmovq $0, %r8          # r8 = 0
    andq %rdi, %rdi         #cmpq 0 %rdi if addre insid rdi equal 0 it means null then ret -1
    je  endofbst           #ret -1

     #if k not greater than 0  === left part
    pushq %rdi                  #%rdi in the stack
    mrmovq 8(%rdi), %rdi        #node = node->left; no change in %rsi
    call kth_bst
    popq %rdi
    rrmovq %rax, %r13

    

    #if (*k > 0): if not eq 0 jump right
    mrmovq (%rsi), %r10     # %r10 holds *k
    andq %r10, %r10
    jne    right

    #rrmovq %rax, %r13
    ret


right:
    mrmovq (%rsi), %r11     #r11 has *k
    irmovq $1, %r9            #r9 = 1
    subq %r9, %r11            # -- *k; r11 have k-1
    rmmovq %r11, (%rsi)         #mov --*k >> to rsi  rsi decremented 
    andq   %r11, %r11           #if k==0 : true
    je k0                       # return root->data
    
    pushq %rdi                  #%rdi in the stack
    mrmovq 16(%rdi), %rdi
    call kth_bst
    popq %rdi
    ret

endofbst:
    irmovq $-1, %rax
    ret


k0:
    mrmovq (%rdi), %rax
    ret
    



    


# Absolutely positioned here to debug addresses more easily.
.pos 0x200
root:
.quad 17
.quad node6
.quad node24

node6:
.quad 6
.quad node4
.quad node11

node4:
.quad 4
.quad node3
.quad node5

node3:
.quad 3
.quad 0
.quad 0

node5:
.quad 5
.quad 0 # Remember that 0 is null.
.quad 0

node11:
.quad 11
.quad node8
.quad 0

node8:
.quad 8
.quad 0
.quad 0

node24:
.quad 24
.quad node19
.quad node40

node19:
.quad 19
.quad 0
.quad 0

node40:
.quad 40
.quad 0
.quad node52

node52:
.quad 52
.quad 0
.quad 0

k:
.quad 8

